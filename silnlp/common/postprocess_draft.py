import argparse
import logging
from pathlib import Path

from ..nmt.clearml_connection import SILClearML
from ..nmt.config_utils import load_config
from ..nmt.postprocess import postprocess_experiment
from .postprocesser import PostprocessConfig, PostprocessHandler
from .utils import get_mt_exp_dir

LOGGER = logging.getLogger(__package__ + ".postprocess_draft")


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Applies the postprocessing steps indicated by the command-line arguments to all of the drafts \
                     generated by an experiment or to a single draft in a source-draft pair."
    )
    parser.add_argument(
        "--experiment",
        required=True,
        default=None,
        help="Name of an experiment directory in MT/experiments. \
        If this option is used, the experiment's translate config will be used to find source and draft files.",
    )
    parser.add_argument(
        "--output-folder",
        default=None,
        help="Output folder for the postprocessed draft. Defaults to the folder of the original draft.",
    )
    parser.add_argument(
        "--paragraph-behavior",
        default="end",
        help="Behavior of paragraph markers for files in USFM format, possible values are 'end', 'place', and 'strip'",
    )
    parser.add_argument(
        "--include-style-markers",
        default=False,
        action="store_true",
        help="Attempt to place style markers in translated verses based on the source project's markers",
    )
    parser.add_argument(
        "--include-embeds",
        default=False,
        action="store_true",
        help="Carry over embeds from the source project to the output without translating them",
    )
    parser.add_argument(
        "--denormalize-quotation-marks",
        default=False,
        action="store_true",
        help="For files in USFM format, attempt to change the draft's quotation marks to match the target project's quote convention",
    )
    parser.add_argument(
        "--source-quote-convention",
        default="detect",
        type=str,
        help="The quote convention for the source project. If not specified, it will be detected automatically.",
    )
    parser.add_argument(
        "--target-quote-convention",
        default="detect",
        type=str,
        help="The quote convention for the target project. If not specified, it will be detected automatically.",
    )
    parser.add_argument(
        "--source-project",
        default="",
        help="The name of the Paratext project used as the source. When the source quote convention is set to 'detect' or not specified,"
        + " this project will be used to detect the source quote convention.",
    )
    parser.add_argument(
        "--clearml-queue",
        default=None,
        type=str,
        help="Run remotely on ClearML queue.  Default: None - don't register with ClearML.  The queue 'local' will run "
        + "it locally and register it with ClearML.",
    )
    args = parser.parse_args()

    experiment = args.experiment.replace("\\", "/")
    args.output_folder = Path(args.output_folder.replace("\\", "/")) if args.output_folder else None
    postprocess_config = PostprocessConfig(vars(args))

    if not get_mt_exp_dir(experiment).exists():
        raise ValueError(f"Experiment {experiment} not found.")

    if args.clearml_queue is not None:
        if "cpu" not in args.clearml_queue:
            raise ValueError("Running this script on a GPU queue will not speed it up. Please only use CPU queues.")
        clearml = SILClearML(experiment, args.clearml_queue)
        config = clearml.config
    else:
        config = load_config(experiment)

    if not (config.exp_dir / "translate_config.yml").exists():
        raise ValueError("Experiment translate_config.yml not found.")

    if postprocess_config.is_base_config():
        LOGGER.info("No postprocessing options used. Applying postprocessing requests from translate config.")
        postprocess_experiment(config, out_dir=args.output_folder)
    else:
        postprocess_handler = PostprocessHandler([postprocess_config], include_base=False)
        postprocess_experiment(config, postprocess_handler=postprocess_handler, out_dir=args.output_folder)


if __name__ == "__main__":
    main()

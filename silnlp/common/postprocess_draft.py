import argparse
import logging
from pathlib import Path

from ..nmt.clearml_connection import SILClearML
from ..nmt.config_utils import load_config
from ..nmt.postprocess import get_draft_paths_from_exp, postprocess_draft, postprocess_experiment
from .paratext import get_project_dir
from .postprocesser import PostprocessConfig, PostprocessHandler
from .utils import get_mt_exp_dir

LOGGER = logging.getLogger(__package__ + ".postprocess_draft")


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Applies the postprocessing steps indicated by the command-line arguments to all of the drafts \
                     generated by an experiment or to a single draft in a source-draft pair."
    )
    parser.add_argument(
        "--experiment",
        default=None,
        help="Name of an experiment directory in MT/experiments. \
        If this option is used, the experiment's translate config will be used to find source and draft files.",
    )
    parser.add_argument(
        "--source",
        default=None,
        help="Path of the source USFM file. \
        If in a Paratext project, the project settings will be used when reading the files.",
    )
    parser.add_argument(
        "--draft",
        default=None,
        help="Path of the draft USFM file that postprocessing will be applied to. \
        Must have the exact same USFM structure as 'source', which it will if it is a draft from that source.",
    )
    parser.add_argument(
        "--book",
        default=None,
        help="3-letter book id of book being evaluated, e.g. MAT. \
        Only necessary if the source file is not in a Paratext project directory.",
    )
    parser.add_argument(
        "--output-folder",
        default=None,
        help="Output folder for the postprocessed draft. Defaults to the folder of the original draft.",
    )
    parser.add_argument(
        "--paragraph-behavior",
        default="end",
        help="Behavior of paragraph markers for files in USFM format, possible values are 'end', 'place', and 'strip'",
    )
    parser.add_argument(
        "--include-style-markers",
        default=False,
        action="store_true",
        help="Attempt to place style markers in translated verses based on the source project's markers",
    )
    parser.add_argument(
        "--include-embeds",
        default=False,
        action="store_true",
        help="Carry over embeds from the source project to the output without translating them",
    )
    parser.add_argument(
        "--clearml-queue",
        default=None,
        type=str,
        help="Run remotely on ClearML queue.  Default: None - don't register with ClearML.  The queue 'local' will run "
        + "it locally and register it with ClearML.",
    )
    args = parser.parse_args()

    experiment = args.experiment.replace("\\", "/") if args.experiment else None
    args.output_folder = Path(args.output_folder.replace("\\", "/")) if args.output_folder else None
    postprocess_config = PostprocessConfig(vars(args))

    if args.experiment and (args.source or args.draft or args.book):
        LOGGER.info("--experiment option used. --source, --draft, and --book will be ignored.")
    if not (args.experiment or (args.source and args.draft)):
        raise ValueError("Not enough options used. Please use --experiment OR --source and --draft.")

    if experiment:
        if not get_mt_exp_dir(experiment).exists():
            raise ValueError(f"Experiment {experiment} not found.")

        if args.clearml_queue is not None:
            if "cpu" not in args.clearml_queue:
                raise ValueError("Running this script on a GPU queue will not speed it up. Please only use CPU queues.")
            clearml = SILClearML(experiment, args.clearml_queue)
            config = clearml.config
        else:
            config = load_config(experiment)

        if not (config.exp_dir / "translate_config.yml").exists():
            raise ValueError("Experiment translate_config.yml not found.")

        if not postprocess_config.is_base_config():
            src_paths, draft_paths, _ = get_draft_paths_from_exp(config)
        else:
            LOGGER.info("No postprocessing options used. Applying postprocessing requests from translate config.")
            postprocess_experiment(config, args.output_folder)
            exit()
    elif args.clearml_queue is not None:
        raise ValueError("Must use --experiment option to use ClearML.")
    else:
        src_paths = [Path(args.source.replace("\\", "/"))]
        draft_paths = [Path(args.draft.replace("\\", "/"))]
        if not str(src_paths[0]).startswith(str(get_project_dir(""))) and args.book is None:
            raise ValueError(
                "--book argument must be passed if the source file is not in a Paratext project directory."
            )

    if postprocess_config.is_base_config():
        raise ValueError("Please use at least one postprocessing option.")
    postprocess_handler = PostprocessHandler([postprocess_config], include_base=False)

    for src_path, draft_path in zip(src_paths, draft_paths):
        postprocess_draft(src_path, draft_path, postprocess_handler, args.book, args.output_folder)


if __name__ == "__main__":
    main()
